<style>
#container {
  position: relative;
}

.head {
  position: relative;
}

.instruction {
  position: relative;
  height: 50px;
  line-height: 50px;
  font-size: 30px;
  text-align: center;
  background: #2C3E50;
  color: white;
}

.hint {
  position: relative;
  height: 90px;
  text-align: center;
  background: #18BC9C;
  color: white;
  padding-top: 10px;
}

.timer {
  position: absolute;
  top: 0;
  left: 0;
  width: 100px;
  height: 50px;
  display: none;
  line-height: 50px;
  font-size: 30px;
  padding: 0 20px;
  color: white;
}

.workspace {
  position: absolute;
  top: 150px;
  left: 0;
  bottom: 0;
  right: 0;
}

.hint .next-arrow:last-child {
  display: none;
}
.hint .bubble {
  position: relative;
  width: 50px;
  height: 50px;
  border-radius: 25px;
  border: 0px none;
  text-align: center;
  line-height: 50px;
  font-size: 12px;
  font-weight: bold;
  color: white;
  display: inline-block;
}
.hint .bubble.target {
  width: 70px;
  height: 70px;
  border-radius: 35px;
  font-size: 17px;
  line-height: 70px;
}

.workspace .bubble {
  position: absolute;
  width: 100px;
  height: 100px;
  border-radius: 50px;
  border: 0px none;
  text-align: center;
  line-height: 100px;
  font-size: 25px;
  font-weight: bold;
  color: white;
}
</style>
<div id="container">
  <div class="head">
    <div class="instruction"></div>
    <div class="hint"></div>
  </div>
  <div class="timer"></div>
  <div class="workspace"></div>
</div>

<script>

var CIRCLE_NUM = 5;

var hash = location.hash,
    level = +(hash||"#1").slice(1) - 1,
    iter,
    count,
    startTime;

var levels = [{
  instruction: "우리나라의 역사를 차례대로 클릭해봐요",
  values: ["고조선","원삼국","삼국","남북국","후삼국","고려","조선","대한제국","임시정부","미군정","대한민국"]
}, {
  instruction: "고려왕조를 차례대로 클릭해봐요",
  values: ["태조","혜종","정종","광종","경종","성종","목종","현종","덕종","정종","문종","순종","선종","헌종","숙종","예종","인종","의종","명종","신종","희종","강종","고종","원종","충렬왕","충선왕","충숙왕","충숙왕","충혜왕","충목왕","충정왕","공민왕","공양왕"]
}, {
  instruction: "조선왕조를 차례대로 클릭해봐요",
  values: ["태조","정종","태종","세종","문종","단종","세조","예종","성종","연산군","중종","인종","명종","선조","광해군","인조","효종","현종","숙종","경종","영조","정조","순조","헌종","철종","고종","순종"]
}];

var pastel = [
  "A03333", "CA494A", "E29EBE", "488A5A", "855C99",
  "EAB364", "684225", "E0764D", "5BB9D3", "4A5B5C"
];

function getIterator(values) {
  index = -1;
  return {
    next: function() {
      index++;
      return values ? index < values.length : true;
    },
    getIndex: function() {
      return index;
    },
    getValue: function() {
      var code = index % 52,
          char;
      if(code < 26) {
        char = String.fromCharCode(65 + code);
      } else {
        char = String.fromCharCode(97 + code - 26);
      }
      return values ? values[index] : char;
    }
  }
}

function timer() {
  var t = parseInt((new Date() - startTime) / 100, 10) / 10;
  $(".timer").text(t.toFixed(1));
  if(t >= 30) {
    alert(count + "개 성공!");
    $(".hint").html("");
    init();
  } else {
    setTimeout(timer, 100);
  }
}

function init() {
  $(".bubble").remove();
  if(level < levels.length) {
    $(".instruction").text("[ " + (level+1) + " 단계 ] " + levels[level].instruction);
    iter = getIterator(levels[level++].values);
  } else {
    alert("모든 문제가 끝났어요! 축하해요!!");
    location.href = "/dragndrop"
  }

  for(var i = 0; i < CIRCLE_NUM; i++) {
    if(iter.next()) {
      addBubble(iter.getIndex(), iter.getValue());
    }
  }
  count = 0;
  $(".hint .bubble[data-index="+count+"]").addClass("target");
}

function addBubble(index, value) {
  var zIndex = 1000 - index,
      top = (Math.random() * ($(".workspace").height() - 100)) + "px",
      left = (Math.random() * ($(".workspace").width() - 100)) + "px",
      idx = parseInt(Math.random() * pastel.length, 10),
      background = "#" + pastel[idx],
      htmlStr,
      $bubble;
  if(("" + value).indexOf(".png") < 0) {
    htmlStr = '<div class="bubble" data-index="' + index + '">' + value + '</div>';
  } else {
    htmlStr = '<img class="bubble" data-index="' + index + '" src="' + value + '" />';
  }
  $bubble = $(htmlStr).css({
    top: top,
    left: left,
    background: background,
    "z-index": zIndex
  });
  $(".workspace").append($bubble);
  $bubble = $(htmlStr).css({
    background: background,
    "z-index": zIndex
  });
  $(".hint").append($bubble);
  $(".hint").append('<span class="next-arrow">▶︎</span>');
}

$(function() {
  $("#container").height($(window).height());
  $(".workspace").click('.bubble', function (e) {
    var indexes = $.map($(".workspace .bubble"), function(el) {
      return +$(el).attr("data-index");
    })
    var min = Math.min.apply(null, indexes);

    if($(e.target).attr("data-index") != min + "") {
      if(level < levels.length) {
        // time-attack 모드에서는 alert을 띄우지 않는다
        alert($(".workspace .bubble[data-index=" + min + "]").text() + " 부터 클릭해주세요");
      }
      return;
    }

    count++;
    $(".hint .bubble.target").removeClass("target");
    $(".hint .bubble[data-index="+count+"]").addClass("target");
    $(e.target).remove();
    $(".hint .bubble:first-child").remove();
    $(".hint .next-arrow:first-child").remove();
    if(iter.next()) {
      addBubble(iter.getIndex(), iter.getValue());
    }
    if(indexes.length <= 1) {
      alert("잘 했어요!");
      if(history.pushState) {
        history.pushState(null, null, '#' + (level+1));
      } else {
        location.hash = '#' + (level+1);
      }
      init();
    }
  });
  init();
});

</script>
