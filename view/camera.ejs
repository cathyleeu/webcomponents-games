<style>
#container {
  position: absolute;
  top: 50px;
  bottom: 0;
  left: 0;
  right: 0;
}
#left {
  position: absolute;
  top: 0;
  bottom: 0;
  left: 0;
  right: 50%;
  background: #e3e3e3;
}
#right {
  position: absolute;
  top: 0;
  bottom: 0;
  left: 50%;
  right: 0;
  background: #fff;
}
.round-box {
  margin: 10px;
  padding: 10px;
  border-radius: 5px;
  font-size: 20px;
}
#left .round-box {
  background: #fff;
}
#right .round-box {
  background: #e3e3e3;
}
video.flip {
  height: 100%;
  -moz-transform: scale(-1, 1);
  -webkit-transform: scale(-1, 1);
  -o-transform: scale(-1, 1);
  transform: scale(-1, 1);
  filter: FlipH;
}

/* 정사각형 박스 만들기 See: https://goo.gl/xF6uQV */
.box {
  position: relative;
  width: 80%; /* 원하는 너비 */
  margin-left: 10%;
  border: 1px solid black;
}
.box:before {
  content: "";
  display: block;
  padding-top: 100%; /* 1:1 비율 */
}
.screen {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  overflow: hidden;
}
#right .box {
  width: 60%;
  margin-left: 20%;
}
.camera-box {
  position: relative;
  text-align: right;
  margin: 10px;
}
.play-box {
  position: relative;
  text-align: center;
  margin: 10px;
}
.cam {
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: yellow;
}
.guide {
  position: absolute;
  top: 20%;
  left: 20%;
  bottom: 20%;
  right: 20%;
  border: 5px solid #f0ad4e;
}
.canvas {
  height: 100%;
  image-rendering: optimizeSpeed;
  image-rendering: -moz-crisp-edges;
  image-rendering: -webkit-optimize-contrast;
  image-rendering: optimize-contrast;
  image-rendering: pixelated;
  -ms-interpolation-mode: nearest-neighbor;
}
</style>
<!-- Navigation -->
<nav id="navbarMaze" class="navbar navbar-default">
    <div class="container">
        <!-- Brand and toggle get grouped for better mobile display -->
        <div class="navbar-header page-scroll">
            <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
            </button>
            <a class="navbar-brand" href="/">KIDSCODING</a>
        </div>

        <!-- Collect the nav links, forms, and other content for toggling -->
        <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
            <ul class="nav navbar-nav navbar-right">
                <li class="hidden">
                    <a href="/"></a>
                </li>
                <!--li class="page-scroll">
                    <a href="#about">문제 만들기</a>
                </li>
                <li class="page-scroll">
                    <a href="#contact">문의</a>
                </li-->
            </ul>
        </div>
        <!-- /.navbar-collapse -->
    </div>
    <!-- /.container-fluid -->
</nav>

<div id="container">
  <div id="left">
    <div class="round-box">
      <i class="fa fa-camera" aria-hidden="true"></i>
      네모칸에 캐릭터 그림을 넣고 '촬영하기'를 눌러주세요<br/>
      <a id="videoChange" href="#">
        <i class="fa fa-refresh" aria-hidden="true"></i>
        카메라 전환
      </a>
      <select id="videoSource" hidden="true"></select>
    </div>
    <div class="box">
      <div class="screen">
        <div class="cam">
          <video autoplay class="flip"></video>
        </div>
        <div class="guide"></div>
      </div>
    </div>
  </div>
  <div id="right">
    <div class="round-box">
      <i class="fa fa-user" aria-hidden="true"></i>
      '촬영하기'를 누르면 캐릭터가 만들어져요
    </div>
    <div class="camera-box">
      <button id="makeimg" type="button" class="btn btn-warning camera-button">촬영하기</button>
    </div>
    <div class="box">
      <div class="screen">
        <canvas class="canvas" width="14" height="14"></canvas>
      </div>
    </div>
    <div class="play-box">
      <button id="goKids" type="button" class="btn btn-warning"><i class="fa fa-play" aria-hidden="true"></i> 키즈코딩 시작</button>
    </div>
  </div>
</div>

<div id="modal" class="modal">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-label="Close" tabindex="0"><span aria-hidden="true">&times;</span></button>
        <h4 class="modal-title">키즈코딩</h4>
      </div>
      <div class="modal-body">
      </div>
      <div class="modal-footer">
        <button type="button" class="close-modal btn btn-default" data-dismiss="modal" tabindex="0"><i class="fa fa-times-circle-o"></i> 닫기</button>
      </div>
    </div><!-- /.modal-content -->
  </div><!-- /.modal-dialog -->
</div><!-- /.modal -->

<script>
  navigator.getUserMedia  = navigator.getUserMedia ||
                            navigator.webkitGetUserMedia ||
                            navigator.mozGetUserMedia ||
                            navigator.msGetUserMedia;

  var video = document.querySelector('video');
  var canvas = document.querySelector('canvas');
  var chapture_canvas = document.createElement('canvas');
  chapture_canvas.width=640;
  chapture_canvas.height=480;
  var ctx = chapture_canvas.getContext('2d');
  ctx.imageSmoothingEnabled = false;
  ctx.mozImageSmoothingEnabled = false;
  ctx.oImageSmoothingEnabled = false;
  ctx.webkitImageSmoothingEnabled = false;
  // flip
  ctx.translate(chapture_canvas.width, 0);
  ctx.scale(-1, 1);
  var localMediaStream = null;
  var isClicked = false;
  var videoSelect = document.querySelector('#videoSource');
  navigator.mediaDevices.enumerateDevices().then(function gotDevices(deviceInfos) {
    deviceInfos.filter(function(item) {
      return item.kind == "videoinput";
    }).forEach(function(item) {
      $(videoSelect).append('<option value="' + item.deviceId + '">' + item.label + '</option>');
    });
  }).catch(function handleError(error) {
    console.log('navigator.getUserMedia error: ', error);
  });

  function start() {
    if (localMediaStream) {
      localMediaStream.getTracks().forEach(function(track) {
        track.stop();
      });
    }
    var videoSource = videoSelect.value;
    var constraints = {
      video: (videoSource ? {
        optional: [{sourceId: videoSource}]
      } : true)
    };
    navigator.getUserMedia(constraints, function(stream){
      var URL = window.URL || window.webkitURL;
      video.src = URL ? URL.createObjectURL(stream) : stream;
      localMediaStream = stream;
    }, function(error) {
  		console.log("Video capture error: ", error.code);
  	});

  };
  $(videoSelect).change(start);
  start();

  $("#videoChange").click(function(e) {
    e.preventDefault();
    if(videoSelect.selectedIndex+1 < videoSelect.length) {
      videoSelect.selectedIndex++;
    } else {
      videoSelect.selectedIndex = 0;
    }
    if(videoSelect.selectedIndex == 0) {
      $(video).addClass('flip');
    } else {
      $(video).removeClass('flip');
    }
    ctx.translate(chapture_canvas.width, 0);
    ctx.scale(-1, 1);
    $(videoSelect).trigger('change');
  });

  function snapshot() {
    if (localMediaStream) {
      ctx.drawImage(video, 0, 0);

      var start_wh = chapture_canvas.height*0.2;
      var p_width = chapture_canvas.height*0.6/14;

      for(var w = 0 ; w < 14 ; w++){
        for(var h = 0 ; h < 14 ; h++){
          var part_info = {
            'wmin' : start_wh + p_width*w,
            'hmin' : start_wh + p_width*h,
            'wmax' : start_wh + p_width*(w+1),
            'hmax' : start_wh + p_width*(h+1)
          };
          setpixelData(part_info);
          var ctx_dot = canvas.getContext("2d");
          var dColor = part_info.pixelData[2] + 256 * part_info.pixelData[1] + 65536 * part_info.pixelData[0];
          ctx_dot.fillStyle = "#"+ dColor.toString(16);
          ctx_dot.fillRect(w, h, 1, 1);
        }
      }
      console.log(canvas.toDataURL('image/png'));
    }
    isClicked = true;
  }
  function setpixelData(part){
    var hsvCounts = new Array();
    for(var i = 0 ; i < 60 ; i++){
      hsvCounts.push({
        'Colors' : new Array(),
        'Count' : 0
      });
    }
    for(var w = part.wmin ; w < part.wmax ; w = w + 3){
      for(var h = part.hmin ; h < part.hmax ; h = h + 3){
        var pixelRBG = chapture_canvas.getContext('2d').getImageData(Math.floor(w+1), Math.floor(h+1), 1, 1).data;
        var pixelHSV = RGBtoHSV(pixelRBG[0],pixelRBG[1], pixelRBG[2]);
        var hsvIndex = Math.floor(pixelHSV/6);
        if(hsvIndex==60) hsvIndex--;
        hsvCounts[hsvIndex].Colors.push(pixelRBG);
        hsvCounts[hsvIndex].Count++;
      }
    }
    hsvCounts.sort(function(a, b){return b.Count-a.Count});
    var sumR = 0;
    var sumG = 0;
    var sumB = 0;
    for(var i=0; i<hsvCounts[0].Count ; i++){
      sumR = sumR + hsvCounts[0].Colors[i][0];
      sumG = sumG + hsvCounts[0].Colors[i][1];
      sumB = sumB + hsvCounts[0].Colors[i][2];
    }
    part.pixelData = [Math.floor(sumR/hsvCounts[0].Count),Math.floor(sumG/hsvCounts[0].Count),Math.floor(sumB/hsvCounts[0].Count),255];
  }
  function RGBtoHSV(r, g, b) {
    if (arguments.length === 1) {
        g = r.g, b = r.b, r = r.r;
    }
    var max = Math.max(r, g, b), min = Math.min(r, g, b),
        d = max - min,
        h,
        s = (max === 0 ? 0 : d / max),
        v = max / 255;

    switch (max) {
        case min: h = 0; break;
        case r: h = (g - b) + d * (g < b ? 6: 0); h /= 6 * d; break;
        case g: h = (b - r) + d * 2; h /= 6 * d; break;
        case b: h = (r - g) + d * 4; h /= 6 * d; break;
    }

    return h;
  }
  function HSVtoRGB(h, s, v) {
    var r, g, b, i, f, p, q, t;
    if (arguments.length === 1) {
        s = h.s, v = h.v, h = h.h;
    }
    i = Math.floor(h * 6);
    f = h * 6 - i;
    p = v * (1 - s);
    q = v * (1 - f * s);
    t = v * (1 - (1 - f) * s);
    switch (i % 6) {
        case 0: r = v, g = t, b = p; break;
        case 1: r = q, g = v, b = p; break;
        case 2: r = p, g = v, b = t; break;
        case 3: r = p, g = q, b = v; break;
        case 4: r = t, g = p, b = v; break;
        case 5: r = v, g = p, b = q; break;
    }
    return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];
  }
  function gocoding() {
    if(isClicked) {
      location.href = "/maze#!0615/1?character=" + encodeURIComponent(canvas.toDataURL('image/png'));
    } else {
      alert("'촬영하기'버튼을 눌러서 키즈코딩 캐릭터를 만들어 보세요")
    }
  }
  document.getElementById('makeimg').addEventListener('click', snapshot, false);
  document.getElementById('goKids').addEventListener('click', gocoding, false);
</script>
